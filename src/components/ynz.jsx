/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { useGSAP } from '@gsap/react';
import gsap from 'gsap';
import { useHarmonizedInteractions } from '../hooks/useHarmonizedInteractions';

export function Ynz(props) {
  const group = useRef();
  const worldRef = useRef();
  const diamondOrbitRef = useRef();
  const { nodes, materials, animations } = useGLTF('/models/ynz.glb');
  const { actions } = useAnimations(animations, group);

  // Use harmonized interactions
  const interactions = useHarmonizedInteractions();

  // Harmonized rotation based on coordinated interactions
  useFrame((state, delta) => {
    if (worldRef.current) {
      const { mouse, scroll, isActive } = interactions.model3D;
      
      // More responsive when mouse is active, subtle when not
      const sensitivity = isActive ? 0.4 : 0.1;
      
      // Mouse-based rotation with variable sensitivity
      const targetRotationX = mouse.y * sensitivity;
      const targetRotationY = mouse.x * sensitivity;
      const targetRotationZ = scroll * 0.3; // Scroll influence

      // Smooth interpolation with adjusted speeds
      const lerpSpeed = isActive ? 3 : 1.5;
      worldRef.current.rotation.x += (targetRotationX - worldRef.current.rotation.x) * delta * lerpSpeed;
      worldRef.current.rotation.y += (targetRotationY - worldRef.current.rotation.y) * delta * lerpSpeed;
      worldRef.current.rotation.z += (targetRotationZ - worldRef.current.rotation.z) * delta * 1;
    }
  });

  useGSAP(() => {
    const tl = gsap.timeline();

    // Main entrance animation
    tl.from(group.current.position, {
      y: 5,
      duration: 3,
      ease: 'circ.out',
    });

    // Diamond orbit rotation animation
    if (diamondOrbitRef.current) {
      tl.from(
        diamondOrbitRef.current.rotation,
        {
          y: Math.PI * 2,
          duration: 8,
          ease: 'power1.inOut',
        },
        '-=50%'
      );

      // Continuous rotation for diamond orbit
      gsap.to(diamondOrbitRef.current.rotation, {
        y: '+=6.28318', // 2 * Math.PI
        duration: 10,
        ease: 'none',
        repeat: -1,
        delay: 3,
      });
    }

    // World scaling animation
    if (worldRef.current) {
      tl.from(
        worldRef.current.scale,
        {
          x: 0.5,
          y: 0.5,
          z: 0.5,
          duration: 2.5,
          ease: 'back.out(0)',
        },
        '-=75%'
      );
    }

    // Play any model animations if they exist
    if (actions && Object.keys(actions).length > 0) {
      Object.values(actions).forEach(action => {
        action?.play();
      });
    }
  }, [actions]);

  return (
    <group ref={group} {...props} dispose={null} scale={0.1}>
      <group name="Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="1_0">
                <mesh
                  name="Object_4"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_4?.geometry}
                  material={materials['.001']}
                />
              </group>
            </group>
          </group>
        </group>
        <group name="world" ref={worldRef} scale={7}>
          <mesh
            name="tmptnu8tmhdobj"
            castShadow
            receiveShadow
            geometry={nodes.tmptnu8tmhdobj?.geometry}
            material={materials.pbr_material}
          />
        </group>
        <group name="DiamondOrbitPivot" ref={diamondOrbitRef}>
          <mesh
            name="Object_10"
            castShadow
            receiveShadow
            geometry={nodes.Object_10?.geometry}
            material={materials['.001']}
            position={[6, 0, 0]}
          />
          <mesh
            name="Object_5"
            castShadow
            receiveShadow
            geometry={nodes.Object_5?.geometry}
            material={materials['.001']}
            position={[3.003, 0, -5.195]}
          />
          <mesh
            name="Object_6"
            castShadow
            receiveShadow
            geometry={nodes.Object_6?.geometry}
            material={materials['.001']}
            position={[-2.994, 0, -5.199]}
          />
          <mesh
            name="Object_7"
            castShadow
            receiveShadow
            geometry={nodes.Object_7?.geometry}
            material={materials['.001']}
            position={[-6, 0, -0.01]}
          />
          <mesh
            name="Object_8"
            castShadow
            receiveShadow
            geometry={nodes.Object_8?.geometry}
            material={materials['.001']}
            position={[-3.011, 0, 5.19]}
          />
          <mesh
            name="Object_9"
            castShadow
            receiveShadow
            geometry={nodes.Object_9?.geometry}
            material={materials['.001']}
            position={[2.986, 0, 5.204]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/models/ynz.glb');
